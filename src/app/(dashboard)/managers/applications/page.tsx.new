"use client";

import { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import {
  useGetApplicationsQuery,
  useGetAuthUserQuery,
  useUpdateApplicationStatusMutation,
} from "@/state/api";
import { 
  CircleCheckBig, 
  Download, 
  Building, 
  Calendar, 
  Clock, 
  Filter, 
  User, 
  ChevronRight,
  X,
  Check,
  AlertCircle,
  MessageSquare,
  Loader2,
  Search
} from "lucide-react";
import Link from "next/link";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { Input } from "@/components/ui/input";
import { formatDistanceToNow } from "date-fns";

// Skeleton loader for applications
const ApplicationSkeleton = () => (
  <div className="w-full space-y-3">
    {[1, 2, 3].map((item) => (
      <Card key={item} className="p-4 bg-white dark:bg-gray-800 border border-slate-200 dark:border-slate-700 overflow-hidden">
        <div className="flex flex-col gap-4">
          <div className="flex items-center justify-between">
            <Skeleton className="h-6 w-3/4 bg-slate-200 dark:bg-slate-700" />
            <Skeleton className="h-6 w-16 bg-slate-200 dark:bg-slate-700 rounded-full" />
          </div>
          <div className="flex flex-col gap-2">
            <Skeleton className="h-4 w-2/3 bg-slate-200 dark:bg-slate-700" />
            <Skeleton className="h-4 w-1/2 bg-slate-200 dark:bg-slate-700" />
          </div>
          <div className="flex justify-end gap-2">
            <Skeleton className="h-9 w-24 bg-slate-200 dark:bg-slate-700 rounded-md" />
            <Skeleton className="h-9 w-24 bg-slate-200 dark:bg-slate-700 rounded-md" />
          </div>
        </div>
      </Card>
    ))}
  </div>
);

// Component for application status badge
interface StatusBadgeProps {
  status: 'Approved' | 'Denied' | 'Pending';
}

const StatusBadge = ({ status }: StatusBadgeProps) => {
  if (status === 'Approved') {
    return (
      <Badge className="bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400 border border-green-200 dark:border-green-800">
        <Check className="w-3 h-3 mr-1" />
        Approved
      </Badge>
    );
  }
  
  if (status === 'Denied') {
    return (
      <Badge className="bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400 border border-red-200 dark:border-red-800">
        <X className="w-3 h-3 mr-1" />
        Denied
      </Badge>
    );
  }
  
  return (
    <Badge className="bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-400 border border-amber-200 dark:border-amber-800">
      <Clock className="w-3 h-3 mr-1" />
      Pending
    </Badge>
  );
};

// Main application card component
interface ApplicationItemProps {
  application: {
    id: number;
    status: 'Approved' | 'Denied' | 'Pending';
    applicationDate: string;
    user?: {
      firstName: string;
      lastName: string;
    };
    property: {
      id: number;
      name: string;
      unit?: string;
      monthlyRent: number;
      address: string;
    };
  };
  handleStatusChange: (id: number, status: 'Approved' | 'Denied' | 'Pending') => Promise<void>;
}

const ApplicationItem = ({ application, handleStatusChange }: ApplicationItemProps) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [isUpdating, setIsUpdating] = useState(false);
  const [updateError, setUpdateError] = useState<string | null>(null);

  const handleStatusUpdate = async (status: 'Approved' | 'Denied' | 'Pending') => {
    setIsUpdating(true);
    setUpdateError(null);
    
    try {
      await handleStatusChange(application.id, status);
    } catch (error) {
      setUpdateError('Failed to update status. Please try again.');
      console.error('Error updating application status:', error);
    } finally {
      setIsUpdating(false);
    }
  };

  const formattedDate = application.applicationDate 
    ? formatDistanceToNow(new Date(application.applicationDate), { addSuffix: true })
    : 'Unknown date';

  return (
    <motion.div
      layout
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
    >
      <Card className="overflow-hidden bg-white dark:bg-gray-800 border border-slate-200 dark:border-slate-700 hover:shadow-md transition-all duration-200">
        <CardContent className="p-0">
          {/* Card Header */}
          <div 
            className="p-4 cursor-pointer flex justify-between items-center"
            onClick={() => setIsExpanded(!isExpanded)}
          >
            <div className="flex-1">
              <div className="flex items-center justify-between mb-2">
                <h3 className="font-heading font-semibold text-slate-900 dark:text-white">
                  {application.property.name}
                  {application.property.unit && ` - Unit ${application.property.unit}`}
                </h3>
                <StatusBadge status={application.status} />
              </div>
              
              <div className="flex flex-col sm:flex-row sm:items-center gap-1 sm:gap-3 text-sm text-slate-500 dark:text-slate-400">
                <div className="flex items-center">
                  <User className="w-3.5 h-3.5 mr-1 flex-shrink-0" />
                  <span>
                    {application.user 
                      ? `${application.user.firstName} ${application.user.lastName}`
                      : 'Unknown Applicant'}
                  </span>
                </div>
                
                <div className="hidden sm:block text-slate-300 dark:text-slate-600">â€¢</div>
                
                <div className="flex items-center">
                  <Calendar className="w-3.5 h-3.5 mr-1 flex-shrink-0" />
                  <span>{formattedDate}</span>
                </div>
              </div>
            </div>
            
            <ChevronRight 
              className={`ml-2 w-5 h-5 text-slate-400 transition-transform duration-300 ${
                isExpanded ? 'rotate-90' : ''
              }`} 
            />
          </div>
          
          {/* Expanded Content */}
          <AnimatePresence>
            {isExpanded && (
              <motion.div
                initial={{ height: 0, opacity: 0 }}
                animate={{ height: 'auto', opacity: 1 }}
                exit={{ height: 0, opacity: 0 }}
                transition={{ duration: 0.3 }}
                className="overflow-hidden"
              >
                <div className="px-4 pb-4 border-t border-slate-200 dark:border-slate-700 pt-3">
                  {/* Property Details */}
                  <div className="mb-4">
                    <h4 className="text-sm font-medium text-slate-900 dark:text-white mb-2">Property Details</h4>
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-2 text-sm">
                      <div className="flex items-center text-slate-500 dark:text-slate-400">
                        <Building className="w-3.5 h-3.5 mr-1.5 flex-shrink-0" />
                        <span>{application.property.address}</span>
                      </div>
                      <div className="flex items-center text-slate-500 dark:text-slate-400">
                        <CircleCheckBig className="w-3.5 h-3.5 mr-1.5 flex-shrink-0" />
                        <span>${application.property.monthlyRent}/month</span>
                      </div>
                    </div>
                  </div>
                  
                  {/* Action Buttons */}
                  <div className="flex flex-wrap sm:flex-nowrap justify-end gap-2 mt-4">
                    <Link 
                      href={`/managers/applications/${application.id}`}
                      className="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2 text-blue-600 dark:text-blue-400 border-blue-200 dark:border-blue-800 hover:bg-blue-50 dark:hover:bg-blue-900/20"
                    >
                      <MessageSquare className="w-4 h-4 mr-2" />
                      View Details
                    </Link>
                    
                    {application.status !== 'Approved' && (
                      <Button
                        variant="outline"
                        className="text-green-600 dark:text-green-400 border-green-200 dark:border-green-800 hover:bg-green-50 dark:hover:bg-green-900/20"
                        onClick={() => handleStatusUpdate('Approved')}
                        disabled={isUpdating}
                      >
                        {isUpdating ? <Loader2 className="w-4 h-4 mr-2 animate-spin" /> : <Check className="w-4 h-4 mr-2" />}
                        Approve
                      </Button>
                    )}
                    
                    {application.status !== 'Denied' && (
                      <Button
                        variant="outline"
                        className="text-red-600 dark:text-red-400 border-red-200 dark:border-red-800 hover:bg-red-50 dark:hover:bg-red-900/20"
                        onClick={() => handleStatusUpdate('Denied')}
                        disabled={isUpdating}
                      >
                        {isUpdating ? <Loader2 className="w-4 h-4 mr-2 animate-spin" /> : <X className="w-4 h-4 mr-2" />}
                        Deny
                      </Button>
                    )}
                  </div>
                  
                  {/* Error Message */}
                  {updateError && (
                    <div className="mt-3 text-sm text-red-600 dark:text-red-400 flex items-center">
                      <AlertCircle className="w-4 h-4 mr-1" />
                      {updateError}
                    </div>
                  )}
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </CardContent>
      </Card>
    </motion.div>
  );
};

// Applications Page Component
const Applications = () => {
  const { data: authUser } = useGetAuthUserQuery();
  const [activeTab, setActiveTab] = useState("all");
  const [searchTerm, setSearchTerm] = useState("");
  const [filterOpen, setFilterOpen] = useState(false);

  const {
    data: applications,
    isLoading,
    isError,
  } = useGetApplicationsQuery(
    {
      userId: authUser?.cognitoInfo?.userId,
      userType: "manager",
    },
    {
      skip: !authUser?.cognitoInfo?.userId,
    }
  );
  
  const [updateApplicationStatus] = useUpdateApplicationStatusMutation();

  const handleStatusChange = async (id: number, status: 'Approved' | 'Denied' | 'Pending') => {
    try {
      await updateApplicationStatus({ id, status });
    } catch (error) {
      console.error("Error updating application status:", error);
      throw error;
    }
  };

  // Filter applications based on active tab and search term
  const filteredApplications = applications?.filter(app => {
    const matchesTab = 
      activeTab === "all" || 
      (activeTab === "pending" && app.status === "Pending") ||
      (activeTab === "approved" && app.status === "Approved") ||
      (activeTab === "denied" && app.status === "Denied");
      
    const matchesSearch = 
      searchTerm === "" ||
      app.property.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      app.property.address.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (app.user && `${app.user.firstName} ${app.user.lastName}`.toLowerCase().includes(searchTerm.toLowerCase()));
      
    return matchesTab && matchesSearch;
  });

  // Calculate counts for each status
  const statusCounts = applications?.reduce((acc, app) => {
    if (app.status === "Pending") acc.pending++;
    if (app.status === "Approved") acc.approved++;
    if (app.status === "Denied") acc.denied++;
    return acc;
  }, { pending: 0, approved: 0, denied: 0 }) || { pending: 0, approved: 0, denied: 0 };

  return (
    <div className="container mx-auto p-6 space-y-6 animate-in fade-in duration-500">
      {/* Header section with gradient background */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-950/40 dark:to-indigo-950/40 p-6 rounded-xl shadow-sm">
        <div>
          <h1 className="text-2xl font-heading font-bold tracking-tight bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-indigo-600 dark:from-blue-400 dark:to-indigo-400">
            Rental Applications
          </h1>
          <p className="text-slate-500 dark:text-slate-400 mt-1">
            Review and manage tenant applications
          </p>
        </div>
      </div>
      
      {/* Search and filters */}
      <div className="flex flex-col sm:flex-row gap-4 items-start sm:items-center bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm border border-slate-200 dark:border-slate-700">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-slate-400" />
          <Input
            placeholder="Search applications..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10"
          />
          {searchTerm && (
            <button
              className="absolute right-3 top-1/2 -translate-y-1/2 text-slate-400 hover:text-slate-600 dark:hover:text-slate-300"
              onClick={() => setSearchTerm("")}
            >
              <X className="w-4 h-4" />
            </button>
          )}
        </div>
        
        <div className="sm:flex-shrink-0">
          <Button 
            variant="outline"
            onClick={() => setFilterOpen(!filterOpen)}
            className="w-full sm:w-auto"
          >
            <Filter className="w-4 h-4 mr-2" />
            Filters
          </Button>
        </div>
      </div>

      {/* Tabs */}
      <div className="mb-6">
        <Tabs
          value={activeTab}
          onValueChange={setActiveTab}
          className="w-full"
        >
          <TabsList className="flex overflow-x-auto bg-white dark:bg-gray-800 rounded-lg p-1 mb-6 border border-slate-200 dark:border-slate-700">
            <TabsTrigger 
              value="all" 
              className="flex-1 data-[state=active]:bg-blue-600 data-[state=active]:text-white rounded-md py-2 px-4"
            >
              All
              {applications && applications.length > 0 && (
                <span className="ml-2 bg-slate-100 dark:bg-slate-700 text-slate-700 dark:text-slate-300 px-2 py-0.5 rounded-full text-xs">
                  {applications.length}
                </span>
              )}
            </TabsTrigger>
            <TabsTrigger 
              value="pending" 
              className="flex-1 data-[state=active]:bg-blue-600 data-[state=active]:text-white rounded-md py-2 px-4"
            >
              Pending
              {statusCounts.pending > 0 && (
                <span className="ml-2 bg-amber-100 dark:bg-amber-900/30 text-amber-800 dark:text-amber-300 px-2 py-0.5 rounded-full text-xs">
                  {statusCounts.pending}
                </span>
              )}
            </TabsTrigger>
            <TabsTrigger 
              value="approved" 
              className="flex-1 data-[state=active]:bg-blue-600 data-[state=active]:text-white rounded-md py-2 px-4"
            >
              Approved
              {statusCounts.approved > 0 && (
                <span className="ml-2 bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-300 px-2 py-0.5 rounded-full text-xs">
                  {statusCounts.approved}
                </span>
              )}
            </TabsTrigger>
            <TabsTrigger 
              value="denied" 
              className="flex-1 data-[state=active]:bg-blue-600 data-[state=active]:text-white rounded-md py-2 px-4"
            >
              Denied
              {statusCounts.denied > 0 && (
                <span className="ml-2 bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-300 px-2 py-0.5 rounded-full text-xs">
                  {statusCounts.denied}
                </span>
              )}
            </TabsTrigger>
          </TabsList>

          {/* Tab contents */}
          <TabsContent value={activeTab} className="mt-0">
            {isLoading ? (
              <ApplicationSkeleton />
            ) : isError ? (
              <div className="flex flex-col items-center justify-center py-12 px-4 bg-white dark:bg-gray-800 rounded-xl border border-slate-200 dark:border-slate-700 text-center">
                <div className="bg-red-100 dark:bg-red-900/20 p-4 rounded-full mb-4">
                  <AlertCircle className="h-8 w-8 text-red-600 dark:text-red-400" />
                </div>
                <h3 className="text-xl font-semibold mb-2">Error Loading Applications</h3>
                <p className="text-slate-500 dark:text-slate-400 mb-6">We couldn't load your applications. Please try again later.</p>
                <Button onClick={() => window.location.reload()}>
                  Retry
                </Button>
              </div>
            ) : filteredApplications && filteredApplications.length > 0 ? (
              <div className="space-y-4">
                {filteredApplications.map((application) => (
                  <ApplicationItem
                    key={application.id}
                    application={application}
                    handleStatusChange={handleStatusChange}
                  />
                ))}
              </div>
            ) : (
              <div className="flex flex-col items-center justify-center py-12 px-4 bg-white dark:bg-gray-800 rounded-xl border border-slate-200 dark:border-slate-700 text-center">
                <div className="bg-slate-100 dark:bg-slate-700 p-4 rounded-full mb-4">
                  <MessageSquare className="h-8 w-8 text-slate-400" />
                </div>
                <h3 className="text-xl font-semibold mb-2">No Applications Found</h3>
                <p className="text-slate-500 dark:text-slate-400 mb-6">
                  {searchTerm 
                    ? "No applications match your search criteria. Try a different search term."
                    : activeTab !== "all" 
                      ? `You don't have any ${activeTab.toLowerCase()} applications.`
                      : "You don't have any applications yet."}
                </p>
              </div>
            )}
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
};

export default Applications;
